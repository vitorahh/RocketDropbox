{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\n * @category Range Helpers\n * @summary Is the given date within the range?\n *\n * @description\n * Is the given date within the range?\n *\n * @param {Date|String|Number} date - the date to check\n * @param {Date|String|Number} startDate - the start of range\n * @param {Date|String|Number} endDate - the end of range\n * @returns {Boolean} the date is within the range\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // For the date within the range:\n * isWithinRange(\n *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> true\n *\n * @example\n * // For the date outside of the range:\n * isWithinRange(\n *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> false\n */\n\n\nfunction isWithinRange(dirtyDate, dirtyStartDate, dirtyEndDate) {\n  var time = parse(dirtyDate).getTime();\n  var startTime = parse(dirtyStartDate).getTime();\n  var endTime = parse(dirtyEndDate).getTime();\n\n  if (startTime > endTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n\n  return time >= startTime && time <= endTime;\n}\n\nmodule.exports = isWithinRange;","map":{"version":3,"sources":["C:/Users/DEV05/OneDrive/Developers/arthasfront/node_modules/date-fns/is_within_range/index.js"],"names":["parse","require","isWithinRange","dirtyDate","dirtyStartDate","dirtyEndDate","time","getTime","startTime","endTime","Error","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASC,aAAT,CAAwBC,SAAxB,EAAmCC,cAAnC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAIC,IAAI,GAAGN,KAAK,CAACG,SAAD,CAAL,CAAiBI,OAAjB,EAAX;AACA,MAAIC,SAAS,GAAGR,KAAK,CAACI,cAAD,CAAL,CAAsBG,OAAtB,EAAhB;AACA,MAAIE,OAAO,GAAGT,KAAK,CAACK,YAAD,CAAL,CAAoBE,OAApB,EAAd;;AAEA,MAAIC,SAAS,GAAGC,OAAhB,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,SAAOJ,IAAI,IAAIE,SAAR,IAAqBF,IAAI,IAAIG,OAApC;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBV,aAAjB","sourcesContent":["var parse = require('../parse/index.js')\n\n/**\n * @category Range Helpers\n * @summary Is the given date within the range?\n *\n * @description\n * Is the given date within the range?\n *\n * @param {Date|String|Number} date - the date to check\n * @param {Date|String|Number} startDate - the start of range\n * @param {Date|String|Number} endDate - the end of range\n * @returns {Boolean} the date is within the range\n * @throws {Error} startDate cannot be after endDate\n *\n * @example\n * // For the date within the range:\n * isWithinRange(\n *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> true\n *\n * @example\n * // For the date outside of the range:\n * isWithinRange(\n *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)\n * )\n * //=> false\n */\nfunction isWithinRange (dirtyDate, dirtyStartDate, dirtyEndDate) {\n  var time = parse(dirtyDate).getTime()\n  var startTime = parse(dirtyStartDate).getTime()\n  var endTime = parse(dirtyEndDate).getTime()\n\n  if (startTime > endTime) {\n    throw new Error('The start of the range cannot be after the end of the range')\n  }\n\n  return time >= startTime && time <= endTime\n}\n\nmodule.exports = isWithinRange\n"]},"metadata":{},"sourceType":"script"}