{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\r\n * @category Range Helpers\r\n * @summary Is the given date within the range?\r\n *\r\n * @description\r\n * Is the given date within the range?\r\n *\r\n * @param {Date|String|Number} date - the date to check\r\n * @param {Date|String|Number} startDate - the start of range\r\n * @param {Date|String|Number} endDate - the end of range\r\n * @returns {Boolean} the date is within the range\r\n * @throws {Error} startDate cannot be after endDate\r\n *\r\n * @example\r\n * // For the date within the range:\r\n * isWithinRange(\r\n *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the range:\r\n * isWithinRange(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n * )\r\n * //=> false\r\n */\n\n\nfunction isWithinRange(dirtyDate, dirtyStartDate, dirtyEndDate) {\n  var time = parse(dirtyDate).getTime();\n  var startTime = parse(dirtyStartDate).getTime();\n  var endTime = parse(dirtyEndDate).getTime();\n\n  if (startTime > endTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n\n  return time >= startTime && time <= endTime;\n}\n\nmodule.exports = isWithinRange;","map":{"version":3,"sources":["C:/Users/Dominic/Documents/RepositoriosGitHub/RocketDropbox/React/node_modules/date-fns/is_within_range/index.js"],"names":["parse","require","isWithinRange","dirtyDate","dirtyStartDate","dirtyEndDate","time","getTime","startTime","endTime","Error","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASC,aAAT,CAAwBC,SAAxB,EAAmCC,cAAnC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAIC,IAAI,GAAGN,KAAK,CAACG,SAAD,CAAL,CAAiBI,OAAjB,EAAX;AACA,MAAIC,SAAS,GAAGR,KAAK,CAACI,cAAD,CAAL,CAAsBG,OAAtB,EAAhB;AACA,MAAIE,OAAO,GAAGT,KAAK,CAACK,YAAD,CAAL,CAAoBE,OAApB,EAAd;;AAEA,MAAIC,SAAS,GAAGC,OAAhB,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,SAAOJ,IAAI,IAAIE,SAAR,IAAqBF,IAAI,IAAIG,OAApC;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBV,aAAjB","sourcesContent":["var parse = require('../parse/index.js')\r\n\r\n/**\r\n * @category Range Helpers\r\n * @summary Is the given date within the range?\r\n *\r\n * @description\r\n * Is the given date within the range?\r\n *\r\n * @param {Date|String|Number} date - the date to check\r\n * @param {Date|String|Number} startDate - the start of range\r\n * @param {Date|String|Number} endDate - the end of range\r\n * @returns {Boolean} the date is within the range\r\n * @throws {Error} startDate cannot be after endDate\r\n *\r\n * @example\r\n * // For the date within the range:\r\n * isWithinRange(\r\n *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the range:\r\n * isWithinRange(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n * )\r\n * //=> false\r\n */\r\nfunction isWithinRange (dirtyDate, dirtyStartDate, dirtyEndDate) {\r\n  var time = parse(dirtyDate).getTime()\r\n  var startTime = parse(dirtyStartDate).getTime()\r\n  var endTime = parse(dirtyEndDate).getTime()\r\n\r\n  if (startTime > endTime) {\r\n    throw new Error('The start of the range cannot be after the end of the range')\r\n  }\r\n\r\n  return time >= startTime && time <= endTime\r\n}\r\n\r\nmodule.exports = isWithinRange\r\n"]},"metadata":{},"sourceType":"script"}