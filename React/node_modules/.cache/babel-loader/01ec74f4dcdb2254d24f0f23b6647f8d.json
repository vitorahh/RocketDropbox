{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\r\n * @category Day Helpers\r\n * @summary Return the array of dates within the specified range.\r\n *\r\n * @description\r\n * Return the array of dates within the specified range.\r\n *\r\n * @param {Date|String|Number} startDate - the first date\r\n * @param {Date|String|Number} endDate - the last date\r\n * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate\r\n * @throws {Error} startDate cannot be after endDate\r\n *\r\n * @example\r\n * // Each day between 6 October 2014 and 10 October 2014:\r\n * var result = eachDay(\r\n *   new Date(2014, 9, 6),\r\n *   new Date(2014, 9, 10)\r\n * )\r\n * //=> [\r\n * //   Mon Oct 06 2014 00:00:00,\r\n * //   Tue Oct 07 2014 00:00:00,\r\n * //   Wed Oct 08 2014 00:00:00,\r\n * //   Thu Oct 09 2014 00:00:00,\r\n * //   Fri Oct 10 2014 00:00:00\r\n * // ]\r\n */\n\n\nfunction eachDay(dirtyStartDate, dirtyEndDate) {\n  var startDate = parse(dirtyStartDate);\n  var endDate = parse(dirtyEndDate);\n  var endTime = endDate.getTime();\n\n  if (startDate.getTime() > endTime) {\n    throw new Error('The first date cannot be after the second date');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(parse(currentDate));\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n\n  return dates;\n}\n\nmodule.exports = eachDay;","map":{"version":3,"sources":["C:/Users/Dominic/Documents/RocketDropbox/node_modules/date-fns/each_day/index.js"],"names":["parse","require","eachDay","dirtyStartDate","dirtyEndDate","startDate","endDate","endTime","getTime","Error","dates","currentDate","setHours","push","setDate","getDate","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAASC,OAAT,CAAkBC,cAAlB,EAAkCC,YAAlC,EAAgD;AAC9C,MAAIC,SAAS,GAAGL,KAAK,CAACG,cAAD,CAArB;AACA,MAAIG,OAAO,GAAGN,KAAK,CAACI,YAAD,CAAnB;AAEA,MAAIG,OAAO,GAAGD,OAAO,CAACE,OAAR,EAAd;;AAEA,MAAIH,SAAS,CAACG,OAAV,KAAsBD,OAA1B,EAAmC;AACjC,UAAM,IAAIE,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAIC,KAAK,GAAG,EAAZ;AAEA,MAAIC,WAAW,GAAGN,SAAlB;AACAM,EAAAA,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;;AAEA,SAAOD,WAAW,CAACH,OAAZ,MAAyBD,OAAhC,EAAyC;AACvCG,IAAAA,KAAK,CAACG,IAAN,CAAWb,KAAK,CAACW,WAAD,CAAhB;AACAA,IAAAA,WAAW,CAACG,OAAZ,CAAoBH,WAAW,CAACI,OAAZ,KAAwB,CAA5C;AACD;;AAED,SAAOL,KAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBf,OAAjB","sourcesContent":["var parse = require('../parse/index.js')\r\n\r\n/**\r\n * @category Day Helpers\r\n * @summary Return the array of dates within the specified range.\r\n *\r\n * @description\r\n * Return the array of dates within the specified range.\r\n *\r\n * @param {Date|String|Number} startDate - the first date\r\n * @param {Date|String|Number} endDate - the last date\r\n * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate\r\n * @throws {Error} startDate cannot be after endDate\r\n *\r\n * @example\r\n * // Each day between 6 October 2014 and 10 October 2014:\r\n * var result = eachDay(\r\n *   new Date(2014, 9, 6),\r\n *   new Date(2014, 9, 10)\r\n * )\r\n * //=> [\r\n * //   Mon Oct 06 2014 00:00:00,\r\n * //   Tue Oct 07 2014 00:00:00,\r\n * //   Wed Oct 08 2014 00:00:00,\r\n * //   Thu Oct 09 2014 00:00:00,\r\n * //   Fri Oct 10 2014 00:00:00\r\n * // ]\r\n */\r\nfunction eachDay (dirtyStartDate, dirtyEndDate) {\r\n  var startDate = parse(dirtyStartDate)\r\n  var endDate = parse(dirtyEndDate)\r\n\r\n  var endTime = endDate.getTime()\r\n\r\n  if (startDate.getTime() > endTime) {\r\n    throw new Error('The first date cannot be after the second date')\r\n  }\r\n\r\n  var dates = []\r\n\r\n  var currentDate = startDate\r\n  currentDate.setHours(0, 0, 0, 0)\r\n\r\n  while (currentDate.getTime() <= endTime) {\r\n    dates.push(parse(currentDate))\r\n    currentDate.setDate(currentDate.getDate() + 1)\r\n  }\r\n\r\n  return dates\r\n}\r\n\r\nmodule.exports = eachDay\r\n"]},"metadata":{},"sourceType":"script"}