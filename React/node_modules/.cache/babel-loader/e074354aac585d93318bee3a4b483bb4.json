{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\r\n * @category Common Helpers\r\n * @summary Compare the two dates and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return 1 if the first date is after the second,\r\n * -1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * @param {Date|String|Number} dateLeft - the first date to compare\r\n * @param {Date|String|Number} dateRight - the second date to compare\r\n * @returns {Number} the result of the comparison\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989:\r\n * var result = compareAsc(\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * )\r\n * //=> -1\r\n *\r\n * @example\r\n * // Sort the array of dates:\r\n * var result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareAsc)\r\n * //=> [\r\n * //   Wed Feb 11 1987 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Sun Jul 02 1995 00:00:00\r\n * // ]\r\n */\n\n\nfunction compareAsc(dirtyDateLeft, dirtyDateRight) {\n  var dateLeft = parse(dirtyDateLeft);\n  var timeLeft = dateLeft.getTime();\n  var dateRight = parse(dirtyDateRight);\n  var timeRight = dateRight.getTime();\n\n  if (timeLeft < timeRight) {\n    return -1;\n  } else if (timeLeft > timeRight) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmodule.exports = compareAsc;","map":{"version":3,"sources":["C:/Users/DEV05/Documents/GitHub/NodeJS/RocketDropbox/React/node_modules/date-fns/compare_asc/index.js"],"names":["parse","require","compareAsc","dirtyDateLeft","dirtyDateRight","dateLeft","timeLeft","getTime","dateRight","timeRight","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASC,UAAT,CAAqBC,aAArB,EAAoCC,cAApC,EAAoD;AAClD,MAAIC,QAAQ,GAAGL,KAAK,CAACG,aAAD,CAApB;AACA,MAAIG,QAAQ,GAAGD,QAAQ,CAACE,OAAT,EAAf;AACA,MAAIC,SAAS,GAAGR,KAAK,CAACI,cAAD,CAArB;AACA,MAAIK,SAAS,GAAGD,SAAS,CAACD,OAAV,EAAhB;;AAEA,MAAID,QAAQ,GAAGG,SAAf,EAA0B;AACxB,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIH,QAAQ,GAAGG,SAAf,EAA0B;AAC/B,WAAO,CAAP;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBT,UAAjB","sourcesContent":["var parse = require('../parse/index.js')\r\n\r\n/**\r\n * @category Common Helpers\r\n * @summary Compare the two dates and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return 1 if the first date is after the second,\r\n * -1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * @param {Date|String|Number} dateLeft - the first date to compare\r\n * @param {Date|String|Number} dateRight - the second date to compare\r\n * @returns {Number} the result of the comparison\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989:\r\n * var result = compareAsc(\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * )\r\n * //=> -1\r\n *\r\n * @example\r\n * // Sort the array of dates:\r\n * var result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareAsc)\r\n * //=> [\r\n * //   Wed Feb 11 1987 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Sun Jul 02 1995 00:00:00\r\n * // ]\r\n */\r\nfunction compareAsc (dirtyDateLeft, dirtyDateRight) {\r\n  var dateLeft = parse(dirtyDateLeft)\r\n  var timeLeft = dateLeft.getTime()\r\n  var dateRight = parse(dirtyDateRight)\r\n  var timeRight = dateRight.getTime()\r\n\r\n  if (timeLeft < timeRight) {\r\n    return -1\r\n  } else if (timeLeft > timeRight) {\r\n    return 1\r\n  } else {\r\n    return 0\r\n  }\r\n}\r\n\r\nmodule.exports = compareAsc\r\n"]},"metadata":{},"sourceType":"script"}