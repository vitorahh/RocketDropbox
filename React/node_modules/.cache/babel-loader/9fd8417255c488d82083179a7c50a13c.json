{"ast":null,"code":"var compareDesc = require('../compare_desc/index.js');\n\nvar parse = require('../parse/index.js');\n\nvar differenceInSeconds = require('../difference_in_seconds/index.js');\n\nvar enLocale = require('../locale/en/index.js');\n\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_YEAR = 525600;\n/**\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words, using strict units.\r\n * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',\r\n * 'less than' and the like.\r\n *\r\n * | Distance between dates | Result              |\r\n * |------------------------|---------------------|\r\n * | 0 ... 59 secs          | [0..59] seconds     |\r\n * | 1 ... 59 mins          | [1..59] minutes     |\r\n * | 1 ... 23 hrs           | [1..23] hours       |\r\n * | 1 ... 29 days          | [1..29] days        |\r\n * | 1 ... 11 months        | [1..11] months      |\r\n * | 1 ... N years          | [1..N]  years       |\r\n *\r\n * @param {Date|String|Number} dateToCompare - the date to compare with\r\n * @param {Date|String|Number} date - the other date\r\n * @param {Object} [options] - the object with options\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit\r\n * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units\r\n * @param {Object} [options.locale=enLocale] - the locale object\r\n * @returns {String} the distance in words\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2014, 6, 2),\r\n *   new Date(2015, 0, 2)\r\n * )\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0),\r\n * )\r\n * //=> '15 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {addSuffix: true}\r\n * )\r\n * //=> '1 year ago'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, in minutes?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {unit: 'm'}\r\n * )\r\n * //=> '525600 minutes'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 28 January 2015, in months, rounded up?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2015, 0, 28),\r\n *   new Date(2015, 0, 1),\r\n *   {unit: 'M', partialMethod: 'ceil'}\r\n * )\r\n * //=> '1 month'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * var eoLocale = require('date-fns/locale/eo')\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2016, 7, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {locale: eoLocale}\r\n * )\r\n * //=> '1 jaro'\r\n */\n\nfunction distanceInWordsStrict(dirtyDateToCompare, dirtyDate, dirtyOptions) {\n  var options = dirtyOptions || {};\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate);\n  var locale = options.locale;\n  var localize = enLocale.distanceInWords.localize;\n\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\n    localize = locale.distanceInWords.localize;\n  }\n\n  var localizeOptions = {\n    addSuffix: Boolean(options.addSuffix),\n    comparison: comparison\n  };\n  var dateLeft, dateRight;\n\n  if (comparison > 0) {\n    dateLeft = parse(dirtyDateToCompare);\n    dateRight = parse(dirtyDate);\n  } else {\n    dateLeft = parse(dirtyDate);\n    dateRight = parse(dirtyDateToCompare);\n  }\n\n  var unit;\n  var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor'];\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();\n  var minutes = mathPartial(seconds / 60) - offset;\n  var hours, days, months, years;\n\n  if (options.unit) {\n    unit = String(options.unit);\n  } else {\n    if (minutes < 1) {\n      unit = 's';\n    } else if (minutes < 60) {\n      unit = 'm';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'h';\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'd';\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'M';\n    } else {\n      unit = 'Y';\n    }\n  } // 0 up to 60 seconds\n\n\n  if (unit === 's') {\n    return localize('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'm') {\n    return localize('xMinutes', minutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'h') {\n    hours = mathPartial(minutes / 60);\n    return localize('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'd') {\n    days = mathPartial(minutes / MINUTES_IN_DAY);\n    return localize('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'M') {\n    months = mathPartial(minutes / MINUTES_IN_MONTH);\n    return localize('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'Y') {\n    years = mathPartial(minutes / MINUTES_IN_YEAR);\n    return localize('xYears', years, localizeOptions);\n  }\n\n  throw new Error('Unknown unit: ' + unit);\n}\n\nmodule.exports = distanceInWordsStrict;","map":{"version":3,"sources":["C:/Users/Dominic/Documents/RepositoriosGitHub/RocketDropbox/React/node_modules/date-fns/distance_in_words_strict/index.js"],"names":["compareDesc","require","parse","differenceInSeconds","enLocale","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","distanceInWordsStrict","dirtyDateToCompare","dirtyDate","dirtyOptions","options","comparison","locale","localize","distanceInWords","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","unit","mathPartial","Math","partialMethod","String","seconds","offset","getTimezoneOffset","minutes","hours","days","months","years","Error","module","exports"],"mappings":"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","sourcesContent":["var compareDesc = require('../compare_desc/index.js')\r\nvar parse = require('../parse/index.js')\r\nvar differenceInSeconds = require('../difference_in_seconds/index.js')\r\nvar enLocale = require('../locale/en/index.js')\r\n\r\nvar MINUTES_IN_DAY = 1440\r\nvar MINUTES_IN_MONTH = 43200\r\nvar MINUTES_IN_YEAR = 525600\r\n\r\n/**\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words, using strict units.\r\n * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',\r\n * 'less than' and the like.\r\n *\r\n * | Distance between dates | Result              |\r\n * |------------------------|---------------------|\r\n * | 0 ... 59 secs          | [0..59] seconds     |\r\n * | 1 ... 59 mins          | [1..59] minutes     |\r\n * | 1 ... 23 hrs           | [1..23] hours       |\r\n * | 1 ... 29 days          | [1..29] days        |\r\n * | 1 ... 11 months        | [1..11] months      |\r\n * | 1 ... N years          | [1..N]  years       |\r\n *\r\n * @param {Date|String|Number} dateToCompare - the date to compare with\r\n * @param {Date|String|Number} date - the other date\r\n * @param {Object} [options] - the object with options\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit\r\n * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units\r\n * @param {Object} [options.locale=enLocale] - the locale object\r\n * @returns {String} the distance in words\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2014, 6, 2),\r\n *   new Date(2015, 0, 2)\r\n * )\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0),\r\n * )\r\n * //=> '15 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {addSuffix: true}\r\n * )\r\n * //=> '1 year ago'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, in minutes?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {unit: 'm'}\r\n * )\r\n * //=> '525600 minutes'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 28 January 2015, in months, rounded up?\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2015, 0, 28),\r\n *   new Date(2015, 0, 1),\r\n *   {unit: 'M', partialMethod: 'ceil'}\r\n * )\r\n * //=> '1 month'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * var eoLocale = require('date-fns/locale/eo')\r\n * var result = distanceInWordsStrict(\r\n *   new Date(2016, 7, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {locale: eoLocale}\r\n * )\r\n * //=> '1 jaro'\r\n */\r\nfunction distanceInWordsStrict (dirtyDateToCompare, dirtyDate, dirtyOptions) {\r\n  var options = dirtyOptions || {}\r\n\r\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)\r\n\r\n  var locale = options.locale\r\n  var localize = enLocale.distanceInWords.localize\r\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\r\n    localize = locale.distanceInWords.localize\r\n  }\r\n\r\n  var localizeOptions = {\r\n    addSuffix: Boolean(options.addSuffix),\r\n    comparison: comparison\r\n  }\r\n\r\n  var dateLeft, dateRight\r\n  if (comparison > 0) {\r\n    dateLeft = parse(dirtyDateToCompare)\r\n    dateRight = parse(dirtyDate)\r\n  } else {\r\n    dateLeft = parse(dirtyDate)\r\n    dateRight = parse(dirtyDateToCompare)\r\n  }\r\n\r\n  var unit\r\n  var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor']\r\n  var seconds = differenceInSeconds(dateRight, dateLeft)\r\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()\r\n  var minutes = mathPartial(seconds / 60) - offset\r\n  var hours, days, months, years\r\n\r\n  if (options.unit) {\r\n    unit = String(options.unit)\r\n  } else {\r\n    if (minutes < 1) {\r\n      unit = 's'\r\n    } else if (minutes < 60) {\r\n      unit = 'm'\r\n    } else if (minutes < MINUTES_IN_DAY) {\r\n      unit = 'h'\r\n    } else if (minutes < MINUTES_IN_MONTH) {\r\n      unit = 'd'\r\n    } else if (minutes < MINUTES_IN_YEAR) {\r\n      unit = 'M'\r\n    } else {\r\n      unit = 'Y'\r\n    }\r\n  }\r\n\r\n  // 0 up to 60 seconds\r\n  if (unit === 's') {\r\n    return localize('xSeconds', seconds, localizeOptions)\r\n\r\n  // 1 up to 60 mins\r\n  } else if (unit === 'm') {\r\n    return localize('xMinutes', minutes, localizeOptions)\r\n\r\n  // 1 up to 24 hours\r\n  } else if (unit === 'h') {\r\n    hours = mathPartial(minutes / 60)\r\n    return localize('xHours', hours, localizeOptions)\r\n\r\n  // 1 up to 30 days\r\n  } else if (unit === 'd') {\r\n    days = mathPartial(minutes / MINUTES_IN_DAY)\r\n    return localize('xDays', days, localizeOptions)\r\n\r\n  // 1 up to 12 months\r\n  } else if (unit === 'M') {\r\n    months = mathPartial(minutes / MINUTES_IN_MONTH)\r\n    return localize('xMonths', months, localizeOptions)\r\n\r\n  // 1 year up to max Date\r\n  } else if (unit === 'Y') {\r\n    years = mathPartial(minutes / MINUTES_IN_YEAR)\r\n    return localize('xYears', years, localizeOptions)\r\n  }\r\n\r\n  throw new Error('Unknown unit: ' + unit)\r\n}\r\n\r\nmodule.exports = distanceInWordsStrict\r\n"]},"metadata":{},"sourceType":"script"}