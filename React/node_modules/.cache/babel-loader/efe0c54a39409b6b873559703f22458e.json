{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @param {Date|String|Number} dateToCompare - the date to compare with\r\n * @param {Date[]|String[]|Number[]} datesArray - the array to search\r\n * @returns {Number} an index of the date closest to the given date\r\n * @throws {TypeError} the second argument must be an instance of Array\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * var dateToCompare = new Date(2015, 8, 6)\r\n * var datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * var result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\n\n\nfunction closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  if (!(dirtyDatesArray instanceof Array)) {\n    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array');\n  }\n\n  var dateToCompare = parse(dirtyDateToCompare);\n  var timeToCompare = dateToCompare.getTime();\n  var result;\n  var minDistance;\n  dirtyDatesArray.forEach(function (dirtyDate, index) {\n    var currentDate = parse(dirtyDate);\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result === undefined || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}\n\nmodule.exports = closestIndexTo;","map":{"version":3,"sources":["C:/Users/Dominic/Documents/RocketDropbox/node_modules/date-fns/closest_index_to/index.js"],"names":["parse","require","closestIndexTo","dirtyDateToCompare","dirtyDatesArray","Array","TypeError","toString","call","dateToCompare","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","index","currentDate","distance","Math","abs","undefined","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,cAAT,CAAyBC,kBAAzB,EAA6CC,eAA7C,EAA8D;AAC5D,MAAI,EAAEA,eAAe,YAAYC,KAA7B,CAAJ,EAAyC;AACvC,UAAM,IAAIC,SAAJ,CAAcC,QAAQ,CAACC,IAAT,CAAcJ,eAAd,IAAiC,8BAA/C,CAAN;AACD;;AAED,MAAIK,aAAa,GAAGT,KAAK,CAACG,kBAAD,CAAzB;AACA,MAAIO,aAAa,GAAGD,aAAa,CAACE,OAAd,EAApB;AAEA,MAAIC,MAAJ;AACA,MAAIC,WAAJ;AAEAT,EAAAA,eAAe,CAACU,OAAhB,CAAwB,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;AAClD,QAAIC,WAAW,GAAGjB,KAAK,CAACe,SAAD,CAAvB;AACA,QAAIG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASV,aAAa,GAAGO,WAAW,CAACN,OAAZ,EAAzB,CAAf;;AACA,QAAIC,MAAM,KAAKS,SAAX,IAAwBH,QAAQ,GAAGL,WAAvC,EAAoD;AAClDD,MAAAA,MAAM,GAAGI,KAAT;AACAH,MAAAA,WAAW,GAAGK,QAAd;AACD;AACF,GAPD;AASA,SAAON,MAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiBrB,cAAjB","sourcesContent":["var parse = require('../parse/index.js')\r\n\r\n/**\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @param {Date|String|Number} dateToCompare - the date to compare with\r\n * @param {Date[]|String[]|Number[]} datesArray - the array to search\r\n * @returns {Number} an index of the date closest to the given date\r\n * @throws {TypeError} the second argument must be an instance of Array\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * var dateToCompare = new Date(2015, 8, 6)\r\n * var datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * var result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\r\nfunction closestIndexTo (dirtyDateToCompare, dirtyDatesArray) {\r\n  if (!(dirtyDatesArray instanceof Array)) {\r\n    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')\r\n  }\r\n\r\n  var dateToCompare = parse(dirtyDateToCompare)\r\n  var timeToCompare = dateToCompare.getTime()\r\n\r\n  var result\r\n  var minDistance\r\n\r\n  dirtyDatesArray.forEach(function (dirtyDate, index) {\r\n    var currentDate = parse(dirtyDate)\r\n    var distance = Math.abs(timeToCompare - currentDate.getTime())\r\n    if (result === undefined || distance < minDistance) {\r\n      result = index\r\n      minDistance = distance\r\n    }\r\n  })\r\n\r\n  return result\r\n}\r\n\r\nmodule.exports = closestIndexTo\r\n"]},"metadata":{},"sourceType":"script"}