{"ast":null,"code":"var isDate = require('../is_date/index.js');\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar parseTokenDateTimeDelimeter = /[T ]/;\nvar parseTokenPlainTime = /:/; // year tokens\n\nvar parseTokenYY = /^(\\d{2})$/;\nvar parseTokensYYY = [/^([+-]\\d{2})$/, // 0 additional digits\n/^([+-]\\d{3})$/, // 1 additional digit\n/^([+-]\\d{4})$/ // 2 additional digits\n];\nvar parseTokenYYYY = /^(\\d{4})/;\nvar parseTokensYYYYY = [/^([+-]\\d{4})/, // 0 additional digits\n/^([+-]\\d{5})/, // 1 additional digit\n/^([+-]\\d{6})/ // 2 additional digits\n]; // date tokens\n\nvar parseTokenMM = /^-(\\d{2})$/;\nvar parseTokenDDD = /^-?(\\d{3})$/;\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/;\nvar parseTokenWww = /^-?W(\\d{2})$/;\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/; // time tokens\n\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/;\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/;\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/; // timezone tokens\n\nvar parseTokenTimezone = /([Z+-].*)$/;\nvar parseTokenTimezoneZ = /^(Z)$/;\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/;\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/;\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nfunction parse(argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument !== 'string') {\n    return new Date(argument);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits;\n\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS;\n  } else {\n    additionalDigits = Number(additionalDigits);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone);\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset();\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset();\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE);\n  } else {\n    return new Date(argument);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(parseTokenDateTimeDelimeter);\n  var timeString;\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits];\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = parseTokenMM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = parseTokenDDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // YYYY-MM-DD or YYYYMMDD\n\n\n  token = parseTokenMMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = parseTokenWww.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    return dayOfISOYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = parseTokenWwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n    return dayOfISOYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = parseTokenHH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = parseTokenHHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = parseTokenHHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction parseTimezone(timezoneString) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = parseTokenTimezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  } // ±hh\n\n\n  token = parseTokenTimezoneHH.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // ±hh:mm or ±hhmm\n\n\n  token = parseTokenTimezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  }\n\n  return 0;\n}\n\nfunction dayOfISOYear(isoYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\nmodule.exports = parse;","map":{"version":3,"sources":["C:/Users/DEV05/OneDrive/Developers/arthasfront/node_modules/date-fns/parse/index.js"],"names":["isDate","require","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","parseTokenDateTimeDelimeter","parseTokenPlainTime","parseTokenYY","parseTokensYYY","parseTokenYYYY","parseTokensYYYYY","parseTokenMM","parseTokenDDD","parseTokenMMDD","parseTokenWww","parseTokenWwwD","parseTokenHH","parseTokenHHMM","parseTokenHHMMSS","parseTokenTimezone","parseTokenTimezoneZ","parseTokenTimezoneHH","parseTokenTimezoneHHMM","parse","argument","dirtyOptions","Date","getTime","options","additionalDigits","Number","dateStrings","splitDateString","parseYearResult","parseYear","date","year","restDateString","parseDate","timestamp","time","offset","parseTime","timezone","parseTimezone","getTimezoneOffset","dateString","array","split","timeString","test","token","exec","replace","parseTokenYYY","parseTokenYYYYY","yearString","parseInt","slice","length","centuryString","month","week","setUTCFullYear","dayOfYear","day","dayOfISOYear","dayOfWeek","hours","minutes","parseFloat","seconds","timezoneString","absoluteOffset","isoYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","module","exports"],"mappings":"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","sourcesContent":["var isDate = require('../is_date/index.js')\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\n\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction parse (argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var options = dirtyOptions || {}\n  var additionalDigits = options.additionalDigits\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n  } else {\n    additionalDigits = Number(additionalDigits)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone)\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset()\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\nmodule.exports = parse\n"]},"metadata":{},"sourceType":"script"}