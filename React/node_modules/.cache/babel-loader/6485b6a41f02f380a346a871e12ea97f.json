{"ast":null,"code":"var parse = require('../parse/index.js');\n/**\r\n * @category Range Helpers\r\n * @summary Is the given date range overlapping with another date range?\r\n *\r\n * @description\r\n * Is the given date range overlapping with another date range?\r\n *\r\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\r\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\r\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\r\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\r\n * @returns {Boolean} whether the date ranges are overlapping\r\n * @throws {Error} startDate of a date range cannot be after its endDate\r\n *\r\n * @example\r\n * // For overlapping date ranges:\r\n * areRangesOverlapping(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping date ranges:\r\n * areRangesOverlapping(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\r\n * )\r\n * //=> false\r\n */\n\n\nfunction areRangesOverlapping(dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime();\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime();\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime();\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime();\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n\n  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;\n}\n\nmodule.exports = areRangesOverlapping;","map":{"version":3,"sources":["C:/Users/Dominic/Documents/RepositoriosGitHub/RocketDropbox/React/node_modules/date-fns/are_ranges_overlapping/index.js"],"names":["parse","require","areRangesOverlapping","dirtyInitialRangeStartDate","dirtyInitialRangeEndDate","dirtyComparedRangeStartDate","dirtyComparedRangeEndDate","initialStartTime","getTime","initialEndTime","comparedStartTime","comparedEndTime","Error","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAASC,oBAAT,CAA+BC,0BAA/B,EAA2DC,wBAA3D,EAAqFC,2BAArF,EAAkHC,yBAAlH,EAA6I;AAC3I,MAAIC,gBAAgB,GAAGP,KAAK,CAACG,0BAAD,CAAL,CAAkCK,OAAlC,EAAvB;AACA,MAAIC,cAAc,GAAGT,KAAK,CAACI,wBAAD,CAAL,CAAgCI,OAAhC,EAArB;AACA,MAAIE,iBAAiB,GAAGV,KAAK,CAACK,2BAAD,CAAL,CAAmCG,OAAnC,EAAxB;AACA,MAAIG,eAAe,GAAGX,KAAK,CAACM,yBAAD,CAAL,CAAiCE,OAAjC,EAAtB;;AAEA,MAAID,gBAAgB,GAAGE,cAAnB,IAAqCC,iBAAiB,GAAGC,eAA7D,EAA8E;AAC5E,UAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,SAAOL,gBAAgB,GAAGI,eAAnB,IAAsCD,iBAAiB,GAAGD,cAAjE;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBZ,oBAAjB","sourcesContent":["var parse = require('../parse/index.js')\r\n\r\n/**\r\n * @category Range Helpers\r\n * @summary Is the given date range overlapping with another date range?\r\n *\r\n * @description\r\n * Is the given date range overlapping with another date range?\r\n *\r\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\r\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\r\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\r\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\r\n * @returns {Boolean} whether the date ranges are overlapping\r\n * @throws {Error} startDate of a date range cannot be after its endDate\r\n *\r\n * @example\r\n * // For overlapping date ranges:\r\n * areRangesOverlapping(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping date ranges:\r\n * areRangesOverlapping(\r\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\r\n * )\r\n * //=> false\r\n */\r\nfunction areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\r\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()\r\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()\r\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()\r\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()\r\n\r\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\r\n    throw new Error('The start of the range cannot be after the end of the range')\r\n  }\r\n\r\n  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime\r\n}\r\n\r\nmodule.exports = areRangesOverlapping\r\n"]},"metadata":{},"sourceType":"script"}