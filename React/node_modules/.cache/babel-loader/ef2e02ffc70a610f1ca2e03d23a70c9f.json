{"ast":null,"code":"var startOfISOWeek = require('../start_of_iso_week/index.js');\n\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\r\n * @category ISO Week Helpers\r\n * @summary Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param {Date|String|Number} dateLeft - the later date\r\n * @param {Date|String|Number} dateRight - the earlier date\r\n * @returns {Number} the number of calendar ISO weeks\r\n *\r\n * @example\r\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\r\n * var result = differenceInCalendarISOWeeks(\r\n *   new Date(2014, 6, 21),\r\n *   new Date(2014, 6, 6)\r\n * )\r\n * //=> 3\r\n */\n\nfunction differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft);\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight);\n  var timestampLeft = startOfISOWeekLeft.getTime() - startOfISOWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n  var timestampRight = startOfISOWeekRight.getTime() - startOfISOWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE; // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}\n\nmodule.exports = differenceInCalendarISOWeeks;","map":{"version":3,"sources":["C:/Users/Dominic/Documents/RepositoriosGitHub/RocketDropbox/React/node_modules/date-fns/difference_in_calendar_iso_weeks/index.js"],"names":["startOfISOWeek","require","MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_WEEK","differenceInCalendarISOWeeks","dirtyDateLeft","dirtyDateRight","startOfISOWeekLeft","startOfISOWeekRight","timestampLeft","getTime","getTimezoneOffset","timestampRight","Math","round","module","exports"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,+BAAD,CAA5B;;AAEA,IAAIC,sBAAsB,GAAG,KAA7B;AACA,IAAIC,oBAAoB,GAAG,SAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,4BAAT,CAAuCC,aAAvC,EAAsDC,cAAtD,EAAsE;AACpE,MAAIC,kBAAkB,GAAGP,cAAc,CAACK,aAAD,CAAvC;AACA,MAAIG,mBAAmB,GAAGR,cAAc,CAACM,cAAD,CAAxC;AAEA,MAAIG,aAAa,GAAGF,kBAAkB,CAACG,OAAnB,KAClBH,kBAAkB,CAACI,iBAAnB,KAAyCT,sBAD3C;AAEA,MAAIU,cAAc,GAAGJ,mBAAmB,CAACE,OAApB,KACnBF,mBAAmB,CAACG,iBAApB,KAA0CT,sBAD5C,CANoE,CASpE;AACA;AACA;;AACA,SAAOW,IAAI,CAACC,KAAL,CAAW,CAACL,aAAa,GAAGG,cAAjB,IAAmCT,oBAA9C,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBZ,4BAAjB","sourcesContent":["var startOfISOWeek = require('../start_of_iso_week/index.js')\r\n\r\nvar MILLISECONDS_IN_MINUTE = 60000\r\nvar MILLISECONDS_IN_WEEK = 604800000\r\n\r\n/**\r\n * @category ISO Week Helpers\r\n * @summary Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param {Date|String|Number} dateLeft - the later date\r\n * @param {Date|String|Number} dateRight - the earlier date\r\n * @returns {Number} the number of calendar ISO weeks\r\n *\r\n * @example\r\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\r\n * var result = differenceInCalendarISOWeeks(\r\n *   new Date(2014, 6, 21),\r\n *   new Date(2014, 6, 6)\r\n * )\r\n * //=> 3\r\n */\r\nfunction differenceInCalendarISOWeeks (dirtyDateLeft, dirtyDateRight) {\r\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft)\r\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight)\r\n\r\n  var timestampLeft = startOfISOWeekLeft.getTime() -\r\n    startOfISOWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\r\n  var timestampRight = startOfISOWeekRight.getTime() -\r\n    startOfISOWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\r\n\r\n  // Round the number of days to the nearest integer\r\n  // because the number of milliseconds in a week is not constant\r\n  // (e.g. it's different in the week of the daylight saving time clock shift)\r\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK)\r\n}\r\n\r\nmodule.exports = differenceInCalendarISOWeeks\r\n"]},"metadata":{},"sourceType":"script"}