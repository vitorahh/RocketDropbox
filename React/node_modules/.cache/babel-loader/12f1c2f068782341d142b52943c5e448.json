{"ast":null,"code":"/* global attachEvent */\n\n/**\r\n * Module requirements.\r\n */\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\n\nvar Polling = require('./polling');\n\nvar Emitter = require('component-emitter');\n\nvar inherit = require('component-inherit');\n\nvar debug = require('debug')('engine.io-client:polling-xhr');\n/**\r\n * Module exports.\r\n */\n\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n/**\r\n * Empty function\r\n */\n\nfunction empty() {}\n/**\r\n * XHR Polling constructor.\r\n *\r\n * @param {Object} opts\r\n * @api public\r\n */\n\n\nfunction XHR(opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n  this.extraHeaders = opts.extraHeaders;\n\n  if (typeof location !== 'undefined') {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port; // some user agents have empty `location.port`\n\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = typeof location !== 'undefined' && opts.hostname !== location.hostname || port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  }\n}\n/**\r\n * Inherits from Polling.\r\n */\n\n\ninherit(XHR, Polling);\n/**\r\n * XHR supports binary\r\n */\n\nXHR.prototype.supportsBinary = true;\n/**\r\n * Creates a request.\r\n *\r\n * @param {String} method\r\n * @api private\r\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n  opts.withCredentials = this.withCredentials; // SSL options for Node.js client\n\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout; // other options for Node.js client\n\n  opts.extraHeaders = this.extraHeaders;\n  return new Request(opts);\n};\n/**\r\n * Sends data.\r\n *\r\n * @param {String} data to send.\r\n * @param {Function} called upon flush.\r\n * @api private\r\n */\n\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({\n    method: 'POST',\n    data: data,\n    isBinary: isBinary\n  });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n/**\r\n * Starts a poll cycle.\r\n *\r\n * @api private\r\n */\n\n\nXHR.prototype.doPoll = function () {\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n/**\r\n * Request constructor\r\n *\r\n * @param {Object} options\r\n * @api public\r\n */\n\n\nfunction Request(opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.withCredentials = opts.withCredentials;\n  this.requestTimeout = opts.requestTimeout; // SSL options for Node.js client\n\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized; // other options for Node.js client\n\n  this.extraHeaders = opts.extraHeaders;\n  this.create();\n}\n/**\r\n * Mix in `Emitter`.\r\n */\n\n\nEmitter(Request.prototype);\n/**\r\n * Creates the XHR object and sends the request.\r\n *\r\n * @api private\r\n */\n\nRequest.prototype.create = function () {\n  var opts = {\n    agent: this.agent,\n    xdomain: this.xd,\n    xscheme: this.xs,\n    enablesXDR: this.enablesXDR\n  }; // SSL options for Node.js client\n\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {} // ie6 check\n\n\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = this.withCredentials;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 2) {\n          try {\n            var contentType = xhr.getResponseHeader('Content-Type');\n\n            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {\n              xhr.responseType = 'arraybuffer';\n            }\n          } catch (e) {}\n        }\n\n        if (4 !== xhr.readyState) return;\n\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (typeof document !== 'undefined') {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n/**\r\n * Called upon successful response.\r\n *\r\n * @api private\r\n */\n\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n/**\r\n * Called if we have data.\r\n *\r\n * @api private\r\n */\n\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n/**\r\n * Called upon error.\r\n *\r\n * @api private\r\n */\n\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n/**\r\n * Cleans up house.\r\n *\r\n * @api private\r\n */\n\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  } // xmlhttprequest\n\n\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (typeof document !== 'undefined') {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n/**\r\n * Called upon load.\r\n *\r\n * @api private\r\n */\n\n\nRequest.prototype.onLoad = function () {\n  var data;\n\n  try {\n    var contentType;\n\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type');\n    } catch (e) {}\n\n    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      data = this.xhr.responseText;\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n\n  if (null != data) {\n    this.onData(data);\n  }\n};\n/**\r\n * Check if it has XDomainRequest.\r\n *\r\n * @api private\r\n */\n\n\nRequest.prototype.hasXDR = function () {\n  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;\n};\n/**\r\n * Aborts the request.\r\n *\r\n * @api public\r\n */\n\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\n\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (typeof document !== 'undefined') {\n  if (typeof attachEvent === 'function') {\n    attachEvent('onunload', unloadHandler);\n  } else if (typeof addEventListener === 'function') {\n    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/DEV05/Documents/GitHub/NodeJS/RocketDropbox/React/node_modules/engine.io-client/lib/transports/polling-xhr.js"],"names":["XMLHttpRequest","require","Polling","Emitter","inherit","debug","module","exports","XHR","Request","empty","opts","call","requestTimeout","extraHeaders","location","isSSL","protocol","port","xd","hostname","xs","secure","prototype","supportsBinary","request","uri","agent","enablesXDR","withCredentials","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","doWrite","data","fn","isBinary","undefined","req","method","self","on","err","onError","sendXhr","doPoll","onData","pollXhr","async","create","xdomain","xscheme","xhr","open","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","timeout","hasXDR","onload","onLoad","onerror","responseText","onreadystatechange","readyState","contentType","getResponseHeader","responseType","status","setTimeout","send","document","index","requestsCount","requests","onSuccess","emit","cleanup","fromError","abort","response","XDomainRequest","attachEvent","unloadHandler","addEventListener","terminationEvent"],"mappings":"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","sourcesContent":["/* global attachEvent */\r\n\r\n/**\r\n * Module requirements.\r\n */\r\n\r\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\r\nvar Polling = require('./polling');\r\nvar Emitter = require('component-emitter');\r\nvar inherit = require('component-inherit');\r\nvar debug = require('debug')('engine.io-client:polling-xhr');\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = XHR;\r\nmodule.exports.Request = Request;\r\n\r\n/**\r\n * Empty function\r\n */\r\n\r\nfunction empty () {}\r\n\r\n/**\r\n * XHR Polling constructor.\r\n *\r\n * @param {Object} opts\r\n * @api public\r\n */\r\n\r\nfunction XHR (opts) {\r\n  Polling.call(this, opts);\r\n  this.requestTimeout = opts.requestTimeout;\r\n  this.extraHeaders = opts.extraHeaders;\r\n\r\n  if (typeof location !== 'undefined') {\r\n    var isSSL = 'https:' === location.protocol;\r\n    var port = location.port;\r\n\r\n    // some user agents have empty `location.port`\r\n    if (!port) {\r\n      port = isSSL ? 443 : 80;\r\n    }\r\n\r\n    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||\r\n      port !== opts.port;\r\n    this.xs = opts.secure !== isSSL;\r\n  }\r\n}\r\n\r\n/**\r\n * Inherits from Polling.\r\n */\r\n\r\ninherit(XHR, Polling);\r\n\r\n/**\r\n * XHR supports binary\r\n */\r\n\r\nXHR.prototype.supportsBinary = true;\r\n\r\n/**\r\n * Creates a request.\r\n *\r\n * @param {String} method\r\n * @api private\r\n */\r\n\r\nXHR.prototype.request = function (opts) {\r\n  opts = opts || {};\r\n  opts.uri = this.uri();\r\n  opts.xd = this.xd;\r\n  opts.xs = this.xs;\r\n  opts.agent = this.agent || false;\r\n  opts.supportsBinary = this.supportsBinary;\r\n  opts.enablesXDR = this.enablesXDR;\r\n  opts.withCredentials = this.withCredentials;\r\n\r\n  // SSL options for Node.js client\r\n  opts.pfx = this.pfx;\r\n  opts.key = this.key;\r\n  opts.passphrase = this.passphrase;\r\n  opts.cert = this.cert;\r\n  opts.ca = this.ca;\r\n  opts.ciphers = this.ciphers;\r\n  opts.rejectUnauthorized = this.rejectUnauthorized;\r\n  opts.requestTimeout = this.requestTimeout;\r\n\r\n  // other options for Node.js client\r\n  opts.extraHeaders = this.extraHeaders;\r\n\r\n  return new Request(opts);\r\n};\r\n\r\n/**\r\n * Sends data.\r\n *\r\n * @param {String} data to send.\r\n * @param {Function} called upon flush.\r\n * @api private\r\n */\r\n\r\nXHR.prototype.doWrite = function (data, fn) {\r\n  var isBinary = typeof data !== 'string' && data !== undefined;\r\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\r\n  var self = this;\r\n  req.on('success', fn);\r\n  req.on('error', function (err) {\r\n    self.onError('xhr post error', err);\r\n  });\r\n  this.sendXhr = req;\r\n};\r\n\r\n/**\r\n * Starts a poll cycle.\r\n *\r\n * @api private\r\n */\r\n\r\nXHR.prototype.doPoll = function () {\r\n  debug('xhr poll');\r\n  var req = this.request();\r\n  var self = this;\r\n  req.on('data', function (data) {\r\n    self.onData(data);\r\n  });\r\n  req.on('error', function (err) {\r\n    self.onError('xhr poll error', err);\r\n  });\r\n  this.pollXhr = req;\r\n};\r\n\r\n/**\r\n * Request constructor\r\n *\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nfunction Request (opts) {\r\n  this.method = opts.method || 'GET';\r\n  this.uri = opts.uri;\r\n  this.xd = !!opts.xd;\r\n  this.xs = !!opts.xs;\r\n  this.async = false !== opts.async;\r\n  this.data = undefined !== opts.data ? opts.data : null;\r\n  this.agent = opts.agent;\r\n  this.isBinary = opts.isBinary;\r\n  this.supportsBinary = opts.supportsBinary;\r\n  this.enablesXDR = opts.enablesXDR;\r\n  this.withCredentials = opts.withCredentials;\r\n  this.requestTimeout = opts.requestTimeout;\r\n\r\n  // SSL options for Node.js client\r\n  this.pfx = opts.pfx;\r\n  this.key = opts.key;\r\n  this.passphrase = opts.passphrase;\r\n  this.cert = opts.cert;\r\n  this.ca = opts.ca;\r\n  this.ciphers = opts.ciphers;\r\n  this.rejectUnauthorized = opts.rejectUnauthorized;\r\n\r\n  // other options for Node.js client\r\n  this.extraHeaders = opts.extraHeaders;\r\n\r\n  this.create();\r\n}\r\n\r\n/**\r\n * Mix in `Emitter`.\r\n */\r\n\r\nEmitter(Request.prototype);\r\n\r\n/**\r\n * Creates the XHR object and sends the request.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.create = function () {\r\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\r\n\r\n  // SSL options for Node.js client\r\n  opts.pfx = this.pfx;\r\n  opts.key = this.key;\r\n  opts.passphrase = this.passphrase;\r\n  opts.cert = this.cert;\r\n  opts.ca = this.ca;\r\n  opts.ciphers = this.ciphers;\r\n  opts.rejectUnauthorized = this.rejectUnauthorized;\r\n\r\n  var xhr = this.xhr = new XMLHttpRequest(opts);\r\n  var self = this;\r\n\r\n  try {\r\n    debug('xhr open %s: %s', this.method, this.uri);\r\n    xhr.open(this.method, this.uri, this.async);\r\n    try {\r\n      if (this.extraHeaders) {\r\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\r\n        for (var i in this.extraHeaders) {\r\n          if (this.extraHeaders.hasOwnProperty(i)) {\r\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {}\r\n\r\n    if ('POST' === this.method) {\r\n      try {\r\n        if (this.isBinary) {\r\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\r\n        } else {\r\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\r\n        }\r\n      } catch (e) {}\r\n    }\r\n\r\n    try {\r\n      xhr.setRequestHeader('Accept', '*/*');\r\n    } catch (e) {}\r\n\r\n    // ie6 check\r\n    if ('withCredentials' in xhr) {\r\n      xhr.withCredentials = this.withCredentials;\r\n    }\r\n\r\n    if (this.requestTimeout) {\r\n      xhr.timeout = this.requestTimeout;\r\n    }\r\n\r\n    if (this.hasXDR()) {\r\n      xhr.onload = function () {\r\n        self.onLoad();\r\n      };\r\n      xhr.onerror = function () {\r\n        self.onError(xhr.responseText);\r\n      };\r\n    } else {\r\n      xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 2) {\r\n          try {\r\n            var contentType = xhr.getResponseHeader('Content-Type');\r\n            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {\r\n              xhr.responseType = 'arraybuffer';\r\n            }\r\n          } catch (e) {}\r\n        }\r\n        if (4 !== xhr.readyState) return;\r\n        if (200 === xhr.status || 1223 === xhr.status) {\r\n          self.onLoad();\r\n        } else {\r\n          // make sure the `error` event handler that's user-set\r\n          // does not throw in the same tick and gets caught here\r\n          setTimeout(function () {\r\n            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);\r\n          }, 0);\r\n        }\r\n      };\r\n    }\r\n\r\n    debug('xhr data %s', this.data);\r\n    xhr.send(this.data);\r\n  } catch (e) {\r\n    // Need to defer since .create() is called directly fhrom the constructor\r\n    // and thus the 'error' event can only be only bound *after* this exception\r\n    // occurs.  Therefore, also, we cannot throw here at all.\r\n    setTimeout(function () {\r\n      self.onError(e);\r\n    }, 0);\r\n    return;\r\n  }\r\n\r\n  if (typeof document !== 'undefined') {\r\n    this.index = Request.requestsCount++;\r\n    Request.requests[this.index] = this;\r\n  }\r\n};\r\n\r\n/**\r\n * Called upon successful response.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onSuccess = function () {\r\n  this.emit('success');\r\n  this.cleanup();\r\n};\r\n\r\n/**\r\n * Called if we have data.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onData = function (data) {\r\n  this.emit('data', data);\r\n  this.onSuccess();\r\n};\r\n\r\n/**\r\n * Called upon error.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onError = function (err) {\r\n  this.emit('error', err);\r\n  this.cleanup(true);\r\n};\r\n\r\n/**\r\n * Cleans up house.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.cleanup = function (fromError) {\r\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\r\n    return;\r\n  }\r\n  // xmlhttprequest\r\n  if (this.hasXDR()) {\r\n    this.xhr.onload = this.xhr.onerror = empty;\r\n  } else {\r\n    this.xhr.onreadystatechange = empty;\r\n  }\r\n\r\n  if (fromError) {\r\n    try {\r\n      this.xhr.abort();\r\n    } catch (e) {}\r\n  }\r\n\r\n  if (typeof document !== 'undefined') {\r\n    delete Request.requests[this.index];\r\n  }\r\n\r\n  this.xhr = null;\r\n};\r\n\r\n/**\r\n * Called upon load.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.onLoad = function () {\r\n  var data;\r\n  try {\r\n    var contentType;\r\n    try {\r\n      contentType = this.xhr.getResponseHeader('Content-Type');\r\n    } catch (e) {}\r\n    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {\r\n      data = this.xhr.response || this.xhr.responseText;\r\n    } else {\r\n      data = this.xhr.responseText;\r\n    }\r\n  } catch (e) {\r\n    this.onError(e);\r\n  }\r\n  if (null != data) {\r\n    this.onData(data);\r\n  }\r\n};\r\n\r\n/**\r\n * Check if it has XDomainRequest.\r\n *\r\n * @api private\r\n */\r\n\r\nRequest.prototype.hasXDR = function () {\r\n  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;\r\n};\r\n\r\n/**\r\n * Aborts the request.\r\n *\r\n * @api public\r\n */\r\n\r\nRequest.prototype.abort = function () {\r\n  this.cleanup();\r\n};\r\n\r\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\r\n\r\nRequest.requestsCount = 0;\r\nRequest.requests = {};\r\n\r\nif (typeof document !== 'undefined') {\r\n  if (typeof attachEvent === 'function') {\r\n    attachEvent('onunload', unloadHandler);\r\n  } else if (typeof addEventListener === 'function') {\r\n    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';\r\n    addEventListener(terminationEvent, unloadHandler, false);\r\n  }\r\n}\r\n\r\nfunction unloadHandler () {\r\n  for (var i in Request.requests) {\r\n    if (Request.requests.hasOwnProperty(i)) {\r\n      Request.requests[i].abort();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}