{"ast":null,"code":"var parse = require('../parse/index.js');\n\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\n * @category Range Helpers\n * @summary Get the number of days that overlap in two date ranges\n *\n * @description\n * Get the number of days that overlap in two date ranges\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Number} the number of days that overlap in two date ranges\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges adds 1 for each started overlapping day:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping date ranges returns 0:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> 0\n */\n\nfunction getOverlappingDaysInRanges(dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime();\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime();\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime();\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime();\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range');\n  }\n\n  var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = comparedStartTime < initialStartTime ? initialStartTime : comparedStartTime;\n  var overlapEndDate = comparedEndTime > initialEndTime ? initialEndTime : comparedEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}\n\nmodule.exports = getOverlappingDaysInRanges;","map":{"version":3,"sources":["C:/Users/DEV05/OneDrive/Developers/arthasfront/node_modules/date-fns/get_overlapping_days_in_ranges/index.js"],"names":["parse","require","MILLISECONDS_IN_DAY","getOverlappingDaysInRanges","dirtyInitialRangeStartDate","dirtyInitialRangeEndDate","dirtyComparedRangeStartDate","dirtyComparedRangeEndDate","initialStartTime","getTime","initialEndTime","comparedStartTime","comparedEndTime","Error","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","Math","ceil","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AAEA,IAAIC,mBAAmB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAAzC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAASC,0BAAT,CAAqCC,0BAArC,EAAiEC,wBAAjE,EAA2FC,2BAA3F,EAAwHC,yBAAxH,EAAmJ;AACjJ,MAAIC,gBAAgB,GAAGR,KAAK,CAACI,0BAAD,CAAL,CAAkCK,OAAlC,EAAvB;AACA,MAAIC,cAAc,GAAGV,KAAK,CAACK,wBAAD,CAAL,CAAgCI,OAAhC,EAArB;AACA,MAAIE,iBAAiB,GAAGX,KAAK,CAACM,2BAAD,CAAL,CAAmCG,OAAnC,EAAxB;AACA,MAAIG,eAAe,GAAGZ,KAAK,CAACO,yBAAD,CAAL,CAAiCE,OAAjC,EAAtB;;AAEA,MAAID,gBAAgB,GAAGE,cAAnB,IAAqCC,iBAAiB,GAAGC,eAA7D,EAA8E;AAC5E,UAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,MAAIC,aAAa,GAAGN,gBAAgB,GAAGI,eAAnB,IAAsCD,iBAAiB,GAAGD,cAA9E;;AAEA,MAAI,CAACI,aAAL,EAAoB;AAClB,WAAO,CAAP;AACD;;AAED,MAAIC,gBAAgB,GAAGJ,iBAAiB,GAAGH,gBAApB,GACnBA,gBADmB,GAEnBG,iBAFJ;AAIA,MAAIK,cAAc,GAAGJ,eAAe,GAAGF,cAAlB,GACjBA,cADiB,GAEjBE,eAFJ;AAIA,MAAIK,cAAc,GAAGD,cAAc,GAAGD,gBAAtC;AAEA,SAAOG,IAAI,CAACC,IAAL,CAAUF,cAAc,GAAGf,mBAA3B,CAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBlB,0BAAjB","sourcesContent":["var parse = require('../parse/index.js')\n\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000\n\n/**\n * @category Range Helpers\n * @summary Get the number of days that overlap in two date ranges\n *\n * @description\n * Get the number of days that overlap in two date ranges\n *\n * @param {Date|String|Number} initialRangeStartDate - the start of the initial range\n * @param {Date|String|Number} initialRangeEndDate - the end of the initial range\n * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with\n * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with\n * @returns {Number} the number of days that overlap in two date ranges\n * @throws {Error} startDate of a date range cannot be after its endDate\n *\n * @example\n * // For overlapping date ranges adds 1 for each started overlapping day:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping date ranges returns 0:\n * getOverlappingDaysInRanges(\n *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)\n * )\n * //=> 0\n */\nfunction getOverlappingDaysInRanges (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {\n  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()\n  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()\n  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()\n  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()\n\n  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {\n    throw new Error('The start of the range cannot be after the end of the range')\n  }\n\n  var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime\n\n  if (!isOverlapping) {\n    return 0\n  }\n\n  var overlapStartDate = comparedStartTime < initialStartTime\n    ? initialStartTime\n    : comparedStartTime\n\n  var overlapEndDate = comparedEndTime > initialEndTime\n    ? initialEndTime\n    : comparedEndTime\n\n  var differenceInMs = overlapEndDate - overlapStartDate\n\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY)\n}\n\nmodule.exports = getOverlappingDaysInRanges\n"]},"metadata":{},"sourceType":"script"}