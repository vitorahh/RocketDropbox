{"ast":null,"code":"var compareDesc = require('../compare_desc/index.js');\n\nvar parse = require('../parse/index.js');\n\nvar differenceInSeconds = require('../difference_in_seconds/index.js');\n\nvar differenceInMonths = require('../difference_in_months/index.js');\n\nvar enLocale = require('../locale/en/index.js');\n\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words.\r\n *\r\n * | Distance between dates                                            | Result              |\r\n * |-------------------------------------------------------------------|---------------------|\r\n * | 0 ... 30 secs                                                     | less than a minute  |\r\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\r\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\r\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\r\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\r\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\r\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\r\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\r\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\r\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\r\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\r\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\r\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\r\n * | N yrs ... N yrs 3 months                                          | about N years       |\r\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\r\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\r\n *\r\n * With `options.includeSeconds == true`:\r\n * | Distance between dates | Result               |\r\n * |------------------------|----------------------|\r\n * | 0 secs ... 5 secs      | less than 5 seconds  |\r\n * | 5 secs ... 10 secs     | less than 10 seconds |\r\n * | 10 secs ... 20 secs    | less than 20 seconds |\r\n * | 20 secs ... 40 secs    | half a minute        |\r\n * | 40 secs ... 60 secs    | less than a minute   |\r\n * | 60 secs ... 90 secs    | 1 minute             |\r\n *\r\n * @param {Date|String|Number} dateToCompare - the date to compare with\r\n * @param {Date|String|Number} date - the other date\r\n * @param {Object} [options] - the object with options\r\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {Object} [options.locale=enLocale] - the locale object\r\n * @returns {String} the distance in words\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * var result = distanceInWords(\r\n *   new Date(2014, 6, 2),\r\n *   new Date(2015, 0, 1)\r\n * )\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00, including seconds?\r\n * var result = distanceInWords(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0),\r\n *   {includeSeconds: true}\r\n * )\r\n * //=> 'less than 20 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * var result = distanceInWords(\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {addSuffix: true}\r\n * )\r\n * //=> 'about 1 year ago'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * var eoLocale = require('date-fns/locale/eo')\r\n * var result = distanceInWords(\r\n *   new Date(2016, 7, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {locale: eoLocale}\r\n * )\r\n * //=> 'pli ol 1 jaro'\r\n */\n\nfunction distanceInWords(dirtyDateToCompare, dirtyDate, dirtyOptions) {\n  var options = dirtyOptions || {};\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate);\n  var locale = options.locale;\n  var localize = enLocale.distanceInWords.localize;\n\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\n    localize = locale.distanceInWords.localize;\n  }\n\n  var localizeOptions = {\n    addSuffix: Boolean(options.addSuffix),\n    comparison: comparison\n  };\n  var dateLeft, dateRight;\n\n  if (comparison > 0) {\n    dateLeft = parse(dirtyDateToCompare);\n    dateRight = parse(dirtyDate);\n  } else {\n    dateLeft = parse(dirtyDate);\n    dateRight = parse(dirtyDateToCompare);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();\n  var minutes = Math.round(seconds / 60) - offset;\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return localize('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return localize('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return localize('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return localize('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return localize('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return localize('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return localize('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return localize('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return localize('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return localize('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return localize('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return localize('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return localize('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return localize('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return localize('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return localize('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return localize('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return localize('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}\n\nmodule.exports = distanceInWords;","map":{"version":3,"sources":["C:/Users/Dominic/Documents/RepositoriosGitHub/RocketDropbox/React/node_modules/date-fns/distance_in_words/index.js"],"names":["compareDesc","require","parse","differenceInSeconds","differenceInMonths","enLocale","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","distanceInWords","dirtyDateToCompare","dirtyDate","dirtyOptions","options","comparison","locale","localize","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","seconds","offset","getTimezoneOffset","minutes","Math","round","months","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","floor","module","exports"],"mappings":"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","sourcesContent":["var compareDesc = require('../compare_desc/index.js')\r\nvar parse = require('../parse/index.js')\r\nvar differenceInSeconds = require('../difference_in_seconds/index.js')\r\nvar differenceInMonths = require('../difference_in_months/index.js')\r\nvar enLocale = require('../locale/en/index.js')\r\n\r\nvar MINUTES_IN_DAY = 1440\r\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520\r\nvar MINUTES_IN_MONTH = 43200\r\nvar MINUTES_IN_TWO_MONTHS = 86400\r\n\r\n/**\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words.\r\n *\r\n * | Distance between dates                                            | Result              |\r\n * |-------------------------------------------------------------------|---------------------|\r\n * | 0 ... 30 secs                                                     | less than a minute  |\r\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\r\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\r\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\r\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\r\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\r\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\r\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\r\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\r\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\r\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\r\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\r\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\r\n * | N yrs ... N yrs 3 months                                          | about N years       |\r\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\r\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\r\n *\r\n * With `options.includeSeconds == true`:\r\n * | Distance between dates | Result               |\r\n * |------------------------|----------------------|\r\n * | 0 secs ... 5 secs      | less than 5 seconds  |\r\n * | 5 secs ... 10 secs     | less than 10 seconds |\r\n * | 10 secs ... 20 secs    | less than 20 seconds |\r\n * | 20 secs ... 40 secs    | half a minute        |\r\n * | 40 secs ... 60 secs    | less than a minute   |\r\n * | 60 secs ... 90 secs    | 1 minute             |\r\n *\r\n * @param {Date|String|Number} dateToCompare - the date to compare with\r\n * @param {Date|String|Number} date - the other date\r\n * @param {Object} [options] - the object with options\r\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {Object} [options.locale=enLocale] - the locale object\r\n * @returns {String} the distance in words\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * var result = distanceInWords(\r\n *   new Date(2014, 6, 2),\r\n *   new Date(2015, 0, 1)\r\n * )\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00, including seconds?\r\n * var result = distanceInWords(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0),\r\n *   {includeSeconds: true}\r\n * )\r\n * //=> 'less than 20 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * var result = distanceInWords(\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {addSuffix: true}\r\n * )\r\n * //=> 'about 1 year ago'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * var eoLocale = require('date-fns/locale/eo')\r\n * var result = distanceInWords(\r\n *   new Date(2016, 7, 1),\r\n *   new Date(2015, 0, 1),\r\n *   {locale: eoLocale}\r\n * )\r\n * //=> 'pli ol 1 jaro'\r\n */\r\nfunction distanceInWords (dirtyDateToCompare, dirtyDate, dirtyOptions) {\r\n  var options = dirtyOptions || {}\r\n\r\n  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)\r\n\r\n  var locale = options.locale\r\n  var localize = enLocale.distanceInWords.localize\r\n  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {\r\n    localize = locale.distanceInWords.localize\r\n  }\r\n\r\n  var localizeOptions = {\r\n    addSuffix: Boolean(options.addSuffix),\r\n    comparison: comparison\r\n  }\r\n\r\n  var dateLeft, dateRight\r\n  if (comparison > 0) {\r\n    dateLeft = parse(dirtyDateToCompare)\r\n    dateRight = parse(dirtyDate)\r\n  } else {\r\n    dateLeft = parse(dirtyDate)\r\n    dateRight = parse(dirtyDateToCompare)\r\n  }\r\n\r\n  var seconds = differenceInSeconds(dateRight, dateLeft)\r\n  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()\r\n  var minutes = Math.round(seconds / 60) - offset\r\n  var months\r\n\r\n  // 0 up to 2 mins\r\n  if (minutes < 2) {\r\n    if (options.includeSeconds) {\r\n      if (seconds < 5) {\r\n        return localize('lessThanXSeconds', 5, localizeOptions)\r\n      } else if (seconds < 10) {\r\n        return localize('lessThanXSeconds', 10, localizeOptions)\r\n      } else if (seconds < 20) {\r\n        return localize('lessThanXSeconds', 20, localizeOptions)\r\n      } else if (seconds < 40) {\r\n        return localize('halfAMinute', null, localizeOptions)\r\n      } else if (seconds < 60) {\r\n        return localize('lessThanXMinutes', 1, localizeOptions)\r\n      } else {\r\n        return localize('xMinutes', 1, localizeOptions)\r\n      }\r\n    } else {\r\n      if (minutes === 0) {\r\n        return localize('lessThanXMinutes', 1, localizeOptions)\r\n      } else {\r\n        return localize('xMinutes', minutes, localizeOptions)\r\n      }\r\n    }\r\n\r\n  // 2 mins up to 0.75 hrs\r\n  } else if (minutes < 45) {\r\n    return localize('xMinutes', minutes, localizeOptions)\r\n\r\n  // 0.75 hrs up to 1.5 hrs\r\n  } else if (minutes < 90) {\r\n    return localize('aboutXHours', 1, localizeOptions)\r\n\r\n  // 1.5 hrs up to 24 hrs\r\n  } else if (minutes < MINUTES_IN_DAY) {\r\n    var hours = Math.round(minutes / 60)\r\n    return localize('aboutXHours', hours, localizeOptions)\r\n\r\n  // 1 day up to 1.75 days\r\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\r\n    return localize('xDays', 1, localizeOptions)\r\n\r\n  // 1.75 days up to 30 days\r\n  } else if (minutes < MINUTES_IN_MONTH) {\r\n    var days = Math.round(minutes / MINUTES_IN_DAY)\r\n    return localize('xDays', days, localizeOptions)\r\n\r\n  // 1 month up to 2 months\r\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\r\n    months = Math.round(minutes / MINUTES_IN_MONTH)\r\n    return localize('aboutXMonths', months, localizeOptions)\r\n  }\r\n\r\n  months = differenceInMonths(dateRight, dateLeft)\r\n\r\n  // 2 months up to 12 months\r\n  if (months < 12) {\r\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH)\r\n    return localize('xMonths', nearestMonth, localizeOptions)\r\n\r\n  // 1 year up to max Date\r\n  } else {\r\n    var monthsSinceStartOfYear = months % 12\r\n    var years = Math.floor(months / 12)\r\n\r\n    // N years up to 1 years 3 months\r\n    if (monthsSinceStartOfYear < 3) {\r\n      return localize('aboutXYears', years, localizeOptions)\r\n\r\n    // N years 3 months up to N years 9 months\r\n    } else if (monthsSinceStartOfYear < 9) {\r\n      return localize('overXYears', years, localizeOptions)\r\n\r\n    // N years 9 months up to N year 12 months\r\n    } else {\r\n      return localize('almostXYears', years + 1, localizeOptions)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = distanceInWords\r\n"]},"metadata":{},"sourceType":"script"}