{"ast":null,"code":"/**\r\n * Module dependencies\r\n */\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\n\nvar XHR = require('./polling-xhr');\n\nvar JSONP = require('./polling-jsonp');\n\nvar websocket = require('./websocket');\n/**\r\n * Export transports.\r\n */\n\n\nexports.polling = polling;\nexports.websocket = websocket;\n/**\r\n * Polling transport polymorphic constructor.\r\n * Decides on xhr vs jsonp based on feature detection.\r\n *\r\n * @api private\r\n */\n\nfunction polling(opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (typeof location !== 'undefined') {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port; // some user agents have empty `location.port`\n\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}","map":{"version":3,"sources":["C:/Users/DEV05/Documents/GitHub/NodeJS/RocketDropbox/React/node_modules/engine.io-client/lib/transports/index.js"],"names":["XMLHttpRequest","require","XHR","JSONP","websocket","exports","polling","opts","xhr","xd","xs","jsonp","location","isSSL","protocol","port","hostname","secure","xdomain","xscheme","forceJSONP","Error"],"mappings":"AAAA;;;AAIA,IAAIA,cAAc,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,eAAD,CAAjB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;AAIAI,OAAO,CAACC,OAAR,GAAkBA,OAAlB;AACAD,OAAO,CAACD,SAAR,GAAoBA,SAApB;AAEA;;;;;;;AAOA,SAASE,OAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIC,GAAJ;AACA,MAAIC,EAAE,GAAG,KAAT;AACA,MAAIC,EAAE,GAAG,KAAT;AACA,MAAIC,KAAK,GAAG,UAAUJ,IAAI,CAACI,KAA3B;;AAEA,MAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnC,QAAIC,KAAK,GAAG,aAAaD,QAAQ,CAACE,QAAlC;AACA,QAAIC,IAAI,GAAGH,QAAQ,CAACG,IAApB,CAFmC,CAInC;;AACA,QAAI,CAACA,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGF,KAAK,GAAG,GAAH,GAAS,EAArB;AACD;;AAEDJ,IAAAA,EAAE,GAAGF,IAAI,CAACS,QAAL,KAAkBJ,QAAQ,CAACI,QAA3B,IAAuCD,IAAI,KAAKR,IAAI,CAACQ,IAA1D;AACAL,IAAAA,EAAE,GAAGH,IAAI,CAACU,MAAL,KAAgBJ,KAArB;AACD;;AAEDN,EAAAA,IAAI,CAACW,OAAL,GAAeT,EAAf;AACAF,EAAAA,IAAI,CAACY,OAAL,GAAeT,EAAf;AACAF,EAAAA,GAAG,GAAG,IAAIR,cAAJ,CAAmBO,IAAnB,CAAN;;AAEA,MAAI,UAAUC,GAAV,IAAiB,CAACD,IAAI,CAACa,UAA3B,EAAuC;AACrC,WAAO,IAAIlB,GAAJ,CAAQK,IAAR,CAAP;AACD,GAFD,MAEO;AACL,QAAI,CAACI,KAAL,EAAY,MAAM,IAAIU,KAAJ,CAAU,gBAAV,CAAN;AACZ,WAAO,IAAIlB,KAAJ,CAAUI,IAAV,CAAP;AACD;AACF","sourcesContent":["/**\r\n * Module dependencies\r\n */\r\n\r\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\r\nvar XHR = require('./polling-xhr');\r\nvar JSONP = require('./polling-jsonp');\r\nvar websocket = require('./websocket');\r\n\r\n/**\r\n * Export transports.\r\n */\r\n\r\nexports.polling = polling;\r\nexports.websocket = websocket;\r\n\r\n/**\r\n * Polling transport polymorphic constructor.\r\n * Decides on xhr vs jsonp based on feature detection.\r\n *\r\n * @api private\r\n */\r\n\r\nfunction polling (opts) {\r\n  var xhr;\r\n  var xd = false;\r\n  var xs = false;\r\n  var jsonp = false !== opts.jsonp;\r\n\r\n  if (typeof location !== 'undefined') {\r\n    var isSSL = 'https:' === location.protocol;\r\n    var port = location.port;\r\n\r\n    // some user agents have empty `location.port`\r\n    if (!port) {\r\n      port = isSSL ? 443 : 80;\r\n    }\r\n\r\n    xd = opts.hostname !== location.hostname || port !== opts.port;\r\n    xs = opts.secure !== isSSL;\r\n  }\r\n\r\n  opts.xdomain = xd;\r\n  opts.xscheme = xs;\r\n  xhr = new XMLHttpRequest(opts);\r\n\r\n  if ('open' in xhr && !opts.forceJSONP) {\r\n    return new XHR(opts);\r\n  } else {\r\n    if (!jsonp) throw new Error('JSONP disabled');\r\n    return new JSONP(opts);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}